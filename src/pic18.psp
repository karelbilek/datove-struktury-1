%!ps
%%BoundingBox: 13 6 163 148
/LDiff {
% Compute the difference between two points
% x0 y0 x1 y1
1 index 4 index sub 1 index 4 index sub
mark 7 3 roll cleartomark
} def
%%%%%%%%%%%%%%%%%%%%
/LAdd {
% Add offset to a point
% x0 y0 dx dy
exch 4 1 roll add 3 1 roll add exch
} def
%%%%%%%%%%%%%%%%%%%%
/LDist {
% Compute distance between two points.
% x0 y0 x1 y1
LDiff dup mul exch dup mul add sqrt
} def
%%%%%%%%%%%%%%%%%%%%
/LXYScale {
% Multiply a coordinate by a scalar.
% x0 y0 t
dup 4 1 roll mul 3 1 roll mul exch
} def
%%%%%%%%%%%%%%%%%%%%
/LAng {
% Compute the angle of slope between two points.
% x0 y0 x1 y1
LDiff exch atan 
} def
%%%%%%%%%%%%%%%%%%%%
/LOnLine { 
% x0 y0 x1 y1 t 
5 copy pop LDiff
3 2 roll LXYScale
4 2 roll pop pop
LAdd
} def
%%%%%%%%%%%%%%%%%%%%
/LOnOrtho {
% x0 y0 x1 y1 t
5 copy pop LDiff
% rotate by 90 degrees
-1 mul exch
3 2 roll LXYScale
LAdd
4 2 roll pop pop
} def
%%%%%%%%%%%%%%%%%%%%
/LOnCircle { 
% x0 y0 x1 y1 t 
180 mul 3.1416 div
5 copy pop LDist
% x0 y0 x1 y1 t r
exch dup cos exch sin 3 2 roll LXYScale
% x0 y0 x1 y1 x y
4 2 roll pop pop LAdd
} def
%%%%%%%%%%%%%%%%%%%%
/LOnBox {
% x0 y0 x1 y1 t
pop 3 1 roll pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for use in LOnSpline
/LA { add 0.5 mul store } def
/LB { exch def } def
/LD { 0 def } def
%%%%%%%%%%%
/LE { 
/tt LB
/a3y LB % define parameters
/a3x LB
/a2y LB
/a2x LB
/a1y LB
/a1x LB
/a0y LB
/a0x LB
/b0x LD % define local variables
/b0y LD
/b1x LD
/b1y LD
/b2x LD
/b2y LD
/c0x LD
/c0y LD
/c1x LD
/c1y LD
/d0x LD
/d0y LD
} def
/LOnSpline {
% a0x a0y a1x a1y a2x a2y a3x a3y tt
50 dict begin
LE % define parameters and local variables
7 {% iterate 7 times
LF % compute new half splines
tt 0.5 le { % on the left half
/tt tt 2 mul store
/a1x b0x store
/a1y b0y store
/a2x c0x store
/a2y c0y store
/a3x d0x store
/a3y d0y store }
{ % on the right half
/tt tt 2 mul 1 sub store
/a0x d0x store
/a0y d0y store
/a1x c1x store
/a1y c1y store
/a2x b2x store
/a2y b2y store } ifelse
} repeat
a0x a0y a3x a3y tt LOnLine % Interpolate between two end points
end
} def
/LLine { 
% x0 y0 x1 y1 
newpath moveto lineto 
stroke 
} def 
%%%%%%%%%%%%%%%%%%%%
/LUVec { % compute a unit vector from (x0,y0) to (x1,y1)
% x0 y0 x1 y1
4 copy LDist
5 1 roll LDiff 3 -1 roll 1 exch div LXYScale
} def
%%%%%%%%%%%%%%%%%%%%
/LArc { 
% x0 y0 x1 y1 x2 y2
newpath 
6 copy pop pop LDist
7 copy pop pop pop LAng
8 copy pop pop 4 2 roll pop pop LAng
% x0 y0  x1 y1 x2 y2 r th1 th2
7 3 roll pop pop moveto
% x0 y0 r th1 th2
arc stroke
} def
%%%%%%%%%%%%%%%%%%%%
/LCircle {
% x0 y0 x1 y1
4 copy LDist 3 1 roll pop pop
% x0 y0 r
newpath 3 copy 0 LAdd moveto
0 360 arc stroke
} def
%%%%%%%%%%%%%%%%%%%% 
/LDot { 
% x0 y0 
2 copy moveto 
currentlinewidth 1.7 mul 0 rmoveto currentlinewidth 1.7 mul 
0 360 arc 
closepath fill
} def 
%%%%%%%%%%%%%%%%% 
/LOdot {
% x0 y0
2 copy
gsave newpath 1 setgray % draw in white
2 copy moveto % move to center of circle
currentlinewidth 1.7 mul 0 rmoveto % move to radius of circle
currentlinewidth 1.7 mul % compute radius of circle
0 360 arc closepath fill % fill in the center
0 setgray % draw in black
2 copy moveto % move to center of circle
currentlinewidth 1.7 mul 0 rmoveto % move to the radius of circle
currentlinewidth 1.7 mul % compute radius of circle
0 360 arc LThin stroke % draw the circle
grestore } def
%%%%%%%%%%%%%%%%% 
/LNarrow { 0.6 setlinewidth } def
%%%%%%%%%%%%%%%%% 
/LWide { 1.2 setlinewidth } def
%%%%%%%%%%%%%%%%%
/LThin { 0.3 setlinewidth } def
/LFine { 0.3 setlinewidth } def
%%%%%%%%%%%%%%%%%
/LDashed { [3] 0 setdash } def
%%%%%%%%%%%%%%%%%
/LNoDash { [] 0 setdash } def
%%%%%%%%%%%%%%%%%
/LSpline {
% x0 y0 x1 y1 x2 y2 x3 y3
8 -2 roll
moveto curveto stroke
} def
%%%%%%%%%%%%%%%%% 
/LTextloc {
% Remove arguemnts from stack, no Postscript drawing needed
% x0 y0 a
pop pop pop pop pop
} def
%%%%%%%%%%%%%%%%%
/LTextlocx {
% remove arguments from stack, no Postscript drawing needed
% x0 y0 x1 y1 x2 y2 a
pop pop pop pop pop pop pop
} def
%%%%%%%%%%%%%%%%%
/LVecx { currentlinewidth 5 mul neg } def
/LVecxx { currentlinewidth 4 mul neg } def
/LVecy { currentlinewidth 3 mul } def
/LVector {
% Draw a vector from (x0,y0) to (x1,y1)
4 copy 4 copy LUVec LVecxx LXYScale LAdd LLine
% need to draw arrow head
% x0 y0 x1 y1
2 copy moveto
4 copy LAng
gsave currentpoint translate rotate
LVecx LVecy neg moveto LVecxx 0 lineto LVecx LVecy lineto 
0 0 lineto closepath fill grestore
pop pop pop pop
} def
%%%%%%%%%%%%%%%%%
/LSArc {
% Draw a standard arc centered at (x0,y0) from (x1,y1) to (x2,y2)
% x0 y0 x1 y1 x2 y2
newpath
6 copy pop pop LAng
7 copy pop 4 2 roll pop pop LAng
% x0 y0 x1 y1 x2 y2 th1 th2
6 2 roll pop pop pop pop
% x0 y0 th1 th2
gsave 0.3 setlinewidth
4 copy pop dup cos 10 mul exch sin 10 mul LAdd moveto
10 3 1 roll arc stroke
grestore
} def
%%%%%%%%%%%%%%%%%
/LCorner {
% Draw a perpendicular indicator at the corner at x0 y0
% x0 y0 x1 y1 x2 y2
gsave
0.3 setlinewidth
newpath
6 copy pop pop LUVec 5 LXYScale
8 copy 6 4 roll pop pop pop pop LUVec 5 LXYScale
8 4 roll pop pop pop pop
% x0 y0 dx1 dy1 dx2 dy2
6 copy pop pop LAdd moveto 6 copy LAdd LAdd lineto
6 copy 4 2 roll pop pop LAdd lineto stroke
grestore
pop pop pop pop pop pop
} def
/LBegin {
% size
20 add dict begin
} def
%%%%%%%%%%%%%%%%%%
/LEnd {
end
} def
89 LBegin
/p0 { 40 20 } def
/p1 { 140 20 } def
/p2 { 160 20 } def
/p3 { 40 80 } def
/p4 { 140 80 } def
/p5 { 160 80 } def
/p6 { 40 140 } def
/p7 { 140 140 } def
/p8 { 160 140 } def
/p9 { 60 8 } def
/p10 { 115 8 } def
/p11 { 115 13 } def
/p12 { 60 13 } def
/p13 { 60 68 } def
/p14 { 115 68 } def
/p15 { 115 73 } def
/p16 { 60 73 } def
/p17 { 60 128 } def
/p18 { 115 128 } def
/p19 { 115 133 } def
/p20 { 60 133 } def
/p21 { 40 60 } def
/p22 { 40 120 } def
/p23 { 5 30 } def
/p24 { 5 110 } def
/p25 { 140 60 } def
/p26 { 140 120 } def
/p27 { 170 30 } def
/p28 { 170 110 } def
/p29 { p24 p22 0.999 LOnLine } def
/p30 { p27 p1 0.999 LOnLine } def
/p31 { 45 20 } def
/p32 { 50 30 } def
/p33 { 42 30 } def
/p34 { p33 p0 0.999 LOnLine } def
/p35 { 135 20 } def
/p36 { 130 30 } def
/p37 { 138 30 } def
/p38 { p37 p1 0.999 LOnLine } def
/p39 { 45 80 } def
/p40 { 50 90 } def
/p41 { 42 90 } def
/p42 { p41 p3 0.999 LOnLine } def
/p43 { 135 60 } def
/p44 { 130 50 } def
/p45 { 138 50 } def
/p46 { p45 p25 0.999 LOnLine } def
/p47 { 45 140 } def
/p48 { 50 150 } def
/p49 { 42 150 } def
/p50 { p49 p6 0.999 LOnLine } def
/p51 { 135 120 } def
/p52 { 130 110 } def
/p53 { 138 110 } def
/p54 { p53 p26 0.999 LOnLine } def
/p55 { 50 25 } def
/p56 { 30 25 } def
/p57 { 65 13 } def
/p58 { 90 13 } def
/p59 { 90 8 } def
/p60 { 100 8 } def
/p61 { 130 25 } def
/p62 { 100 25 } def
/p63 { 35 40 } def
/p64 { 150 40 } def
/p65 { 35 20 } def
/p66 { 150 100 } def
/p67 { 50 85 } def
/p68 { 30 85 } def
/p69 { 65 73 } def
/p70 { 90 73 } def
/p71 { 90 68 } def
/p72 { 100 68 } def
/p73 { 125 63 } def
/p74 { 160 63 } def
/p75 { 35 100 } def
/p76 { 150 140 } def
/p77 { 7 75 } def
/p78 { 7 40 } def
/p79 { 170 75 } def
/p80 { 170 120 } def
/p81 { 50 145 } def
/p82 { 30 145 } def
/p83 { 65 133 } def
/p84 { 90 133 } def
/p85 { 90 128 } def
/p86 { 100 128 } def
/p87 { 125 118 } def
/p88 { 160 118 } def
LNarrow
p0 p1 2 LTextloc
p1 p2 3 LTextloc
p3 p4 4 LTextloc
p4 p5 5 LTextloc
p6 p7 6 LTextloc
p7 p8 7 LTextloc
p55 p56 8 LTextloc
p58 p57 9 LTextloc
p59 p60 10 LTextloc
p61 p62 11 LTextloc
p63 p65 12 LTextloc
p64 p66 13 LTextloc
p67 p68 14 LTextloc
p70 p69 15 LTextloc
p71 p72 16 LTextloc
p73 p74 17 LTextloc
p75 p63 18 LTextloc
p66 p76 19 LTextloc
p77 p78 20 LTextloc
p79 p80 21 LTextloc
p81 p82 22 LTextloc
p84 p83 23 LTextloc
p85 p86 24 LTextloc
p87 p88 25 LTextloc
p9 p10 LVector
p11 p12 LVector
p13 p14 LVector
p15 p16 LVector
p17 p18 LVector
p19 p20 LVector
p21 p0 LVector
p22 p3 LVector
p0 p23 p24 p22 LSpline
p29 p22 LVector
p1 p25 LVector
p4 p26 LVector
p26 p28 p27 p1 LSpline
p30 p1 LVector
p31 p32 p33 p0 LSpline
p34 p0 LVector
p35 p36 p37 p1 LSpline
p38 p1 LVector
p39 p40 p41 p3 LSpline
p42 p3 LVector
p43 p44 p45 p25 LSpline
p46 p25 LVector
p47 p48 p49 p6 LSpline
p50 p6 LVector
p51 p52 p53 p26 LSpline
p54 p26 LVector
LEnd